<postgis version="2.1">
	<command name="AddAuth">
		<function>AddAuth(auth_token)</function>
		<return_type>boolean</return_type>
		<description>Add an authorization token to be used in current transaction.</description>
	</command>
	<command name="AddEdge">
		<function>AddEdge(toponame, aline)</function>
		<return_type>integer</return_type>
		<description>Adds a linestring edge to the edge table and associated start and end points to the point nodes table of the specified topology schema using the specified linestring geometry and returns the edgeid of the new (or existing) edge.</description>
	</command>
	<command name="AddFace">
		<function>AddFace(toponame, apolygon, force_new=false)</function>
		<return_type>integer</return_type>
		<description>Registers a face primitive to a topology and get it's identifier.</description>
	</command>
	<command name="AddGeometryColumn">
		<function>AddGeometryColumn(table_name, column_name, srid, type, dimension, use_typmod=true)</function>
		<return_type>text</return_type>
		<description>Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints.   Pass in false for use_typmod to get old check constraint based behavior</description>
	</command>
	<command name="AddNode">
		<function>AddNode(toponame, apoint, allowEdgeSplitting=false, computeContainingFace=false)</function>
		<return_type>integer</return_type>
		<description>Adds a point node to the node table in the specified topology schema and returns the nodeid of new node. If point already exists as node, the existing nodeid is returned.</description>
	</command>
	<command name="AddOverviewConstraints">
		<function>AddOverviewConstraints(ovschema, ovtable, ovcolumn, refschema, reftable, refcolumn, ovfactor)</function>
		<return_type>boolean</return_type>
		<description>Tag a raster column as being an overview of another.</description>
	</command>
	<command name="AddRasterConstraints">
		<function>AddRasterConstraints(rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true)</function>
		<return_type>boolean</return_type>
		<description>Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.</description>
	</command>
	<command name="AddTopoGeometryColumn">
		<function>AddTopoGeometryColumn(topology_name, schema_name, table_name, column_name, feature_type)</function>
		<return_type>text</return_type>
		<description>Adds a topogeometry column to an existing table, registers this new column as a layer in topology.layer and returns the new layer_id.</description>
	</command>
	<command name="AsGML">
		<function>AsGML(tg)</function>
		<return_type>text</return_type>
		<description>Returns the GML representation of a topogeometry.</description>
	</command>
	<command name="AsTopoJSON">
		<function>AsTopoJSON(tg, edgeMapTable)</function>
		<return_type>text</return_type>
		<description>Returns the TopoJSON representation of a topogeometry.</description>
	</command>
	<command name="Box2D">
		<function>Box2D(geomA)</function>
		<return_type>box2d</return_type>
		<description>Returns a BOX2D representing the maximum extents of the geometry.</description>
	</command>
	<command name="Box3D">
		<function>Box3D(geomA)</function>
		<return_type>box3d</return_type>
		<description>Returns a BOX3D representing the maximum extents of the geometry.</description>
	</command>
	<command name="Box3D">
		<function>Box3D(rast)</function>
		<return_type>box3d</return_type>
		<description>Returns the box 3d representation of the enclosing box of the raster.</description>
	</command>
	<command name="CheckAuth">
		<function>CheckAuth(a_schema_name, a_table_name, a_key_column_name)</function>
		<return_type>integer</return_type>
		<description>Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.</description>
	</command>
	<command name="clearTopoGeom">
		<function>clearTopoGeom(topogeom)</function>
		<return_type>topogeometry</return_type>
		<description>Clears the content of a topo geometry</description>
	</command>
	<command name="CopyTopology">
		<function>CopyTopology(existing_topology_name, new_name)</function>
		<return_type>integer</return_type>
		<description>Makes a copy of a topology structure (nodes, edges, faces, layers and TopoGeometries).</description>
	</command>
	<command name="CreateTopoGeom">
		<function>CreateTopoGeom(toponame, tg_type, layer_id, tg_objs)</function>
		<return_type>topogeometry</return_type>
		<description>Creates a new topo geometry object from topo element array - tg_type: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection</description>
	</command>
	<command name="CreateTopology">
		<function>CreateTopology(topology_schema_name)</function>
		<return_type>integer</return_type>
		<description>Creates a new topology schema and registers this new schema in the topology.topology table.</description>
	</command>
	<command name="DisableLongTransactions">
		<function>DisableLongTransactions()</function>
		<return_type>text</return_type>
		<description>Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.</description>
	</command>
	<command name="Drop_Indexes_Generate_Script">
		<function>Drop_Indexes_Generate_Script(param_schema=tiger_data)</function>
		<return_type>text</return_type>
		<description>Generates a script that drops all non-primary key and non-unique indexes on tiger schema and user specified schema.  Defaults schema to tiger_data if no schema is specified.</description>
	</command>
	<command name="Drop_Nation_Tables_Generate_Script">
		<function>Drop_Nation_Tables_Generate_Script(param_schema=tiger_data)</function>
		<return_type>text</return_type>
		<description>Generates a script that drops all tables in the specified schema that start with county_all, state_all or stae code followed by county or state.</description>
	</command>
	<command name="Drop_State_Tables_Generate_Script">
		<function>Drop_State_Tables_Generate_Script(param_state, param_schema=tiger_data)</function>
		<return_type>text</return_type>
		<description>Generates a script that drops all tables in the specified schema that are prefixed with the state abbreviation.  Defaults schema to tiger_data if no schema is specified.</description>
	</command>
	<command name="DropGeometryColumn">
		<function>DropGeometryColumn(table_name, column_name)</function>
		<return_type>text</return_type>
		<description>Removes a geometry column from a spatial table.</description>
	</command>
	<command name="DropGeometryTable">
		<function>DropGeometryTable(table_name)</function>
		<return_type>boolean</return_type>
		<description>Drops a table and all its references in geometry_columns.</description>
	</command>
	<command name="DropOverviewConstraints">
		<function>DropOverviewConstraints(ovschema, ovtable, ovcolumn)</function>
		<return_type>boolean</return_type>
		<description>Untag a raster column from being an overview of another.</description>
	</command>
	<command name="DropRasterConstraints">
		<function>DropRasterConstraints(rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true)</function>
		<return_type>boolean</return_type>
		<description>Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.</description>
	</command>
	<command name="DropTopoGeometryColumn">
		<function>DropTopoGeometryColumn(schema_name, table_name, column_name)</function>
		<return_type>text</return_type>
		<description>Drops the topogeometry column from the table named table_name in schema schema_name and unregisters the columns from topology.layer table.</description>
	</command>
	<command name="DropTopology">
		<function>DropTopology(topology_schema_name)</function>
		<return_type>integer</return_type>
		<description>Use with caution: Drops a topology schema and deletes its reference from  topology.topology table and references to tables in that schema from the geometry_columns table.</description>
	</command>
	<command name="EnableLongTransactions">
		<function>EnableLongTransactions()</function>
		<return_type>text</return_type>
		<description>Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.</description>
	</command>
	<command name="Equals">
		<function>Equals(tg1, tg2)</function>
		<return_type>boolean</return_type>
		<description>Returns true if two topogeometries are composed of the same topology primitives.</description>
	</command>
	<command name="Equals">
		<function>Equals(tg1, tg2)</function>
		<return_type>boolean</return_type>
		<description>Returns true if two topogeometries are composed of the same topology primitives.</description>
	</command>
	<command name="Find_SRID">
		<function>Find_SRID(a_schema_name, a_table_name, a_geomfield_name)</function>
		<return_type>integer</return_type>
		<description>The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.</description>
	</command>
	<command name="geocode">
		<function>geocode(address, max_results=10, restrict_region=NULL, OUT addy, OUT geomout, OUT rating)</function>
		<return_type>setof record</return_type>
		<description>Takes in an address as a string (or other normalized address) and outputs a set of possible locations which include a point geometry in NAD 83 long lat, a normalized address for each, and the rating.  The lower the rating the more likely the match.   Results are sorted by lowest rating first. Can optionally pass in maximum results, defaults to 10, and restrict_region (defaults to NULL)</description>
	</command>
	<command name="geocode_intersection">
		<function>geocode_intersection( roadway1, roadway2, in_state, in_city, in_zip, max_results=10, OUT addy, OUT geomout, OUT rating)</function>
		<return_type>setof record</return_type>
		<description>Takes in 2 streets that intersect and a state, city, zip,  and outputs a set of possible locations on the first cross street that is at the intersection, also includes a point geometry in NAD 83 long lat, a normalized address for each location, and the rating.  The lower the rating the more likely the match.   Results are sorted by lowest rating first. Can optionally pass in maximum results, defaults to 10</description>
	</command>
	<command name="GeometryType">
		<function>GeometryType(geomA)</function>
		<return_type>text</return_type>
		<description>Returns the type of the geometry as a string. Eg: 'LINESTRING', 'POLYGON', 'MULTIPOINT', etc.</description>
	</command>
	<command name="Get_Geocode_Setting">
		<function>Get_Geocode_Setting( setting_name)</function>
		<return_type>text</return_type>
		<description>Returns value of specific setting stored in tiger.geocode_settings table.</description>
	</command>
	<command name="get_tract">
		<function>get_tract( loc_geom, output_field=name)</function>
		<return_type>text</return_type>
		<description>Returns census tract or field from tract table of where the geometry is located. Default to returning short name of tract.</description>
	</command>
	<command name="GetEdgeByPoint">
		<function>GetEdgeByPoint(atopology, apoint, tol)</function>
		<return_type>integer</return_type>
		<description>Find the edge-id of an edge that intersects a given point</description>
	</command>
	<command name="GetFaceByPoint">
		<function>GetFaceByPoint(atopology, apoint, tol)</function>
		<return_type>integer</return_type>
		<description>Find the face-id of a face that intersects a given point</description>
	</command>
	<command name="GetNodeByPoint">
		<function>GetNodeByPoint(atopology, point, tol)</function>
		<return_type>integer</return_type>
		<description>Find the id of a node at a point location</description>
	</command>
	<command name="GetNodeEdges">
		<function>GetNodeEdges(atopology, anode)</function>
		<return_type>getfaceedges_returntype</return_type>
		<description>Returns an ordered set of edges incident to the given node.</description>
	</command>
	<command name="GetRingEdges">
		<function>GetRingEdges(atopology, aring, max_edges=null)</function>
		<return_type>getfaceedges_returntype</return_type>
		<description>Returns an ordered set of edges forming a ring with the given edge .</description>
	</command>
	<command name="GetTopoGeomElementArray">
		<function>GetTopoGeomElementArray(toponame, layer_id, tg_id)</function>
		<return_type>topoelementarray</return_type>
		<description>Returns a topoelementarray (an array of topoelements) containing the topological elements and type of the given TopoGeometry (primitive elements)</description>
	</command>
	<command name="GetTopoGeomElements">
		<function>GetTopoGeomElements(toponame, layer_id, tg_id)</function>
		<return_type>setof record</return_type>
		<description>Returns a set of topoelement objects containing the topological  element_id,element_type of the given TopoGeometry (primitive elements)</description>
	</command>
	<command name="GetTopologyID">
		<function>GetTopologyID(toponame)</function>
		<return_type>integer</return_type>
		<description>Returns the id of a topology in the topology.topology table given the name of the topology.</description>
	</command>
	<command name="GetTopologyID">
		<function>GetTopologyID(toponame)</function>
		<return_type>integer</return_type>
		<description>Returns the SRID of a topology in the topology.topology table given the name of the topology.</description>
	</command>
	<command name="GetTopologyName">
		<function>GetTopologyName(topology_id)</function>
		<return_type>varchar</return_type>
		<description>Returns the name of a topology (schema) given the id of the topology.</description>
	</command>
	<command name="Install_Missing_Indexes">
		<function>Install_Missing_Indexes()</function>
		<return_type>boolean</return_type>
		<description>Finds all tables with key columns used in geocoder joins and filter conditions that are missing used indexes on those columns and will add them.</description>
	</command>
	<command name="loader_generate_census_script">
		<function>loader_generate_census_script(param_states, os)</function>
		<return_type>setof text</return_type>
		<description>Generates a shell script for the specified platform for the specified states that will download Tiger census state tract, bg, and tabblocks data tables, stage and load into tiger_data schema. Each state script is returned as a separate record.</description>
	</command>
	<command name="loader_generate_nation_script">
		<function>loader_generate_nation_script(os)</function>
		<return_type>text</return_type>
		<description>Generates a shell script for the specified platform that loads in the county and state lookup tables.</description>
	</command>
	<command name="loader_generate_script">
		<function>loader_generate_script(param_states, os)</function>
		<return_type>setof text</return_type>
		<description>Generates a shell script for the specified platform for the specified states that will download Tiger data, stage and load into tiger_data schema. Each state script is returned as a separate record. Latest version supports Tiger 2010 structural changes and also loads census tract, block groups, and blocks tables.</description>
	</command>
	<command name="LockRow">
		<function>LockRow(a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt)</function>
		<return_type>integer</return_type>
		<description>Set lock/authorization for specific row in table</description>
	</command>
	<command name="Missing_Indexes_Generate_Script">
		<function>Missing_Indexes_Generate_Script()</function>
		<return_type>text</return_type>
		<description>Finds all tables with key columns used in geocoder joins that are missing indexes on those columns and will output the SQL DDL to define the index for those tables.</description>
	</command>
	<command name="normalize_address">
		<function>normalize_address(in_address)</function>
		<return_type>norm_addy</return_type>
		<description>Given a textual street address, returns a composite norm_addy type that has road suffix, prefix and type standardized, street, streetname etc. broken into separate fields.  This function  will work with just the lookup data packaged with the tiger_geocoder (no need for tiger census data).</description>
	</command>
	<command name="pagc_normalize_address">
		<function>pagc_normalize_address(in_address)</function>
		<return_type>norm_addy</return_type>
		<description>Given a textual street address, returns a composite norm_addy type that has road suffix, prefix and type standardized, street, streetname etc. broken into separate fields.  This function  will work with just the lookup data packaged with the tiger_geocoder (no need for tiger census data). Requires address_standardizer extension.</description>
	</command>
	<command name="Polygonize">
		<function>Polygonize(toponame)</function>
		<return_type>text</return_type>
		<description>Find and register all faces defined by topology edges</description>
	</command>
	<command name="Populate_Geometry_Columns">
		<function>Populate_Geometry_Columns(use_typmod=true)</function>
		<return_type>text</return_type>
		<description>Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry  columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false</description>
	</command>
	<command name="PostGIS_AddBBox">
		<function>PostGIS_AddBBox(geomA)</function>
		<return_type>geometry</return_type>
		<description>Add bounding box to the geometry.</description>
	</command>
	<command name="PostGIS_DropBBox">
		<function>PostGIS_DropBBox(geomA)</function>
		<return_type>geometry</return_type>
		<description>Drop the bounding box cache from the geometry.</description>
	</command>
	<command name="PostGIS_Full_Version">
		<function>PostGIS_Full_Version()</function>
		<return_type>text</return_type>
		<description>Reports full postgis version and build configuration infos.</description>
	</command>
	<command name="PostGIS_GEOS_Version">
		<function>PostGIS_GEOS_Version()</function>
		<return_type>text</return_type>
		<description>Returns the version number of the GEOS library.</description>
	</command>
	<command name="PostGIS_HasBBox">
		<function>PostGIS_HasBBox(geomA)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.</description>
	</command>
	<command name="PostGIS_Lib_Build_Date">
		<function>PostGIS_Lib_Build_Date()</function>
		<return_type>text</return_type>
		<description>Returns build date of the PostGIS library.</description>
	</command>
	<command name="PostGIS_Lib_Version">
		<function>PostGIS_Lib_Version()</function>
		<return_type>text</return_type>
		<description>Returns the version number of the PostGIS library.</description>
	</command>
	<command name="PostGIS_LibXML_Version">
		<function>PostGIS_LibXML_Version()</function>
		<return_type>text</return_type>
		<description>Returns the version number of the libxml2 library.</description>
	</command>
	<command name="PostGIS_PROJ_Version">
		<function>PostGIS_PROJ_Version()</function>
		<return_type>text</return_type>
		<description>Returns the version number of the PROJ4 library.</description>
	</command>
	<command name="PostGIS_Raster_Lib_Build_Date">
		<function>PostGIS_Raster_Lib_Build_Date()</function>
		<return_type>text</return_type>
		<description>Reports full raster library build date.</description>
	</command>
	<command name="PostGIS_Raster_Lib_Version">
		<function>PostGIS_Raster_Lib_Version()</function>
		<return_type>text</return_type>
		<description>Reports full raster version and build configuration infos.</description>
	</command>
	<command name="PostGIS_Scripts_Build_Date">
		<function>PostGIS_Scripts_Build_Date()</function>
		<return_type>text</return_type>
		<description>Returns build date of the PostGIS scripts.</description>
	</command>
	<command name="PostGIS_Scripts_Installed">
		<function>PostGIS_Scripts_Installed()</function>
		<return_type>text</return_type>
		<description>Returns version of the postgis scripts installed in this database.</description>
	</command>
	<command name="PostGIS_Scripts_Released">
		<function>PostGIS_Scripts_Released()</function>
		<return_type>text</return_type>
		<description>Returns the version number of the postgis.sql script released with the installed postgis lib.</description>
	</command>
	<command name="postgis_sfcgal_version">
		<function>postgis_sfcgal_version()</function>
		<return_type>text</return_type>
		<description>Returns the version of SFCGAL in use</description>
	</command>
	<command name="PostGIS_Version">
		<function>PostGIS_Version()</function>
		<return_type>text</return_type>
		<description>Returns PostGIS version number and compile-time options.</description>
	</command>
	<command name="pprint_addy">
		<function>pprint_addy(in_addy)</function>
		<return_type>varchar</return_type>
		<description>Given a norm_addy composite type object, returns a pretty print representation of it. Usually used in conjunction with normalize_address.</description>
	</command>
	<command name="Reverse_Geocode">
		<function>Reverse_Geocode(pt, include_strnum_range=false, OUT intpt, OUT addy, OUT street)</function>
		<return_type>record</return_type>
		<description>Takes a geometry point in a known spatial ref sys and returns a record containing an array of theoretically possible addresses and an array of cross streets.  If include_strnum_range = true, includes the street range in the cross streets.</description>
	</command>
	<command name="Set_Geocode_Setting">
		<function>Set_Geocode_Setting( setting_name, setting_value)</function>
		<return_type>text</return_type>
		<description>Sets a setting that affects behavior of geocoder functions.</description>
	</command>
	<command name="ST_3DArea">
		<function>ST_3DArea(geom1)</function>
		<return_type>float</return_type>
		<description>Computes area of 3D geometries</description>
	</command>
	<command name="ST_3DClosestPoint">
		<function>ST_3DClosestPoint(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 3-dimensional point on g1 that is closest to g2.  This is the first point of  the 3D shortest line.</description>
	</command>
	<command name="ST_3DDFullyWithin">
		<function>ST_3DDFullyWithin(g1, g2, distance)</function>
		<return_type>boolean</return_type>
		<description>Returns true if all of the 3D geometries are within the specified distance of one another.</description>
	</command>
	<command name="ST_3DDistance">
		<function>ST_3DDistance(g1, g2)</function>
		<return_type>float</return_type>
		<description>For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.</description>
	</command>
	<command name="ST_3DDWithin">
		<function>ST_3DDWithin(g1, g2, distance_of_srid)</function>
		<return_type>boolean</return_type>
		<description>For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.</description>
	</command>
	<command name="ST_3DExtent">
		<function>ST_3DExtent(geomfield)</function>
		<return_type>box3d</return_type>
		<description>An aggregate function that returns the box3D bounding box that bounds rows of geometries.</description>
	</command>
	<command name="ST_3DIntersection">
		<function>ST_3DIntersection(geom1, geom2)</function>
		<return_type>geometry</return_type>
		<description>Perform 3D intersection</description>
	</command>
	<command name="ST_3DIntersects">
		<function>ST_3DIntersects(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the Geometries 'spatially intersect' in 3d - only for points and linestrings</description>
	</command>
	<command name="ST_3DLength">
		<function>ST_3DLength(a_3dlinestring)</function>
		<return_type>float</return_type>
		<description>Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.</description>
	</command>
	<command name="ST_3DLength_Spheroid">
		<function>ST_3DLength_Spheroid(a_linestring, a_spheroid)</function>
		<return_type>float</return_type>
		<description>Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.</description>
	</command>
	<command name="ST_3DLongestLine">
		<function>ST_3DLongestLine(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 3-dimensional longest line between two geometries</description>
	</command>
	<command name="ST_3DMakeBox">
		<function>ST_3DMakeBox(point3DLowLeftBottom, point3DUpRightTop)</function>
		<return_type>box3d</return_type>
		<description>Creates a BOX3D defined by the given 3d point geometries.</description>
	</command>
	<command name="ST_3DMaxDistance">
		<function>ST_3DMaxDistance(g1, g2)</function>
		<return_type>float</return_type>
		<description>For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.</description>
	</command>
	<command name="ST_3DPerimeter">
		<function>ST_3DPerimeter(geomA)</function>
		<return_type>float</return_type>
		<description>Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.</description>
	</command>
	<command name="ST_3DShortestLine">
		<function>ST_3DShortestLine(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 3-dimensional shortest line between two geometries</description>
	</command>
	<command name="ST_Accum">
		<function>ST_Accum(geomfield)</function>
		<return_type>geometry</return_type>
		<description>Aggregate. Constructs an array of geometries.</description>
	</command>
	<command name="ST_AddBand">
		<function>ST_AddBand(rast, addbandargset)</function>
		<return_type>raster</return_type>
		<description>Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.</description>
	</command>
	<command name="ST_AddEdgeModFace">
		<function>ST_AddEdgeModFace(atopology, anode, anothernode, acurve)</function>
		<return_type>integer</return_type>
		<description>Add a new edge and, if in doing so it splits a face, modify the original face and add a new face.</description>
	</command>
	<command name="ST_AddEdgeNewFaces">
		<function>ST_AddEdgeNewFaces(atopology, anode, anothernode, acurve)</function>
		<return_type>integer</return_type>
		<description>Add a new edge and, if in doing so it splits a face, delete the original face and replace it with two new faces.</description>
	</command>
	<command name="ST_AddIsoEdge">
		<function>ST_AddIsoEdge(atopology, anode, anothernode, alinestring)</function>
		<return_type>integer</return_type>
		<description>Adds an isolated edge defined by geometry alinestring to a topology connecting two existing isolated nodes anode and anothernode and returns the edge id of the new edge.</description>
	</command>
	<command name="ST_AddIsoNode">
		<function>ST_AddIsoNode(atopology, aface, apoint)</function>
		<return_type>integer</return_type>
		<description>Adds an isolated node to a face in a topology and returns the nodeid of the new node. If face is null, the node is still created.</description>
	</command>
	<command name="ST_AddMeasure">
		<function>ST_AddMeasure(geom_mline, measure_start, measure_end)</function>
		<return_type>geometry</return_type>
		<description>Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.</description>
	</command>
	<command name="ST_AddPoint">
		<function>ST_AddPoint(linestring, point)</function>
		<return_type>geometry</return_type>
		<description>Adds a point to a LineString before point 'position' (0-based index).</description>
	</command>
	<command name="ST_Affine">
		<function>ST_Affine(geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff)</function>
		<return_type>geometry</return_type>
		<description>Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.</description>
	</command>
	<command name="ST_Area">
		<function>ST_Area(g1)</function>
		<return_type>float</return_type>
		<description>Returns the area of the surface if it is a polygon or multi-polygon. For 'geometry' type area is in SRID units.  For 'geography' area is in square meters.</description>
	</command>
	<command name="ST_AsBinary">
		<function>ST_AsBinary(g1)</function>
		<return_type>bytea</return_type>
		<description>Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.</description>
	</command>
	<command name="ST_AsBinary">
		<function>ST_AsBinary(rast, outasin=FALSE)</function>
		<return_type>bytea</return_type>
		<description>Return the Well-Known Binary (WKB) representation of the raster without SRID meta data.</description>
	</command>
	<command name="ST_AsEWKB">
		<function>ST_AsEWKB(g1)</function>
		<return_type>bytea</return_type>
		<description>Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.</description>
	</command>
	<command name="ST_AsEWKT">
		<function>ST_AsEWKT(g1)</function>
		<return_type>text</return_type>
		<description>Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.</description>
	</command>
	<command name="ST_AsGDALRaster">
		<function>ST_AsGDALRaster(rast, format, options=NULL, srid=sameassource)</function>
		<return_type>bytea</return_type>
		<description>Return the raster tile in the designated GDAL Raster format.  Raster formats are one of those supported by your compiled library. Use ST_GDALRasters() to get a list of formats supported by your library.</description>
	</command>
	<command name="ST_AsGeoJSON">
		<function>ST_AsGeoJSON(geom, maxdecimaldigits=15, options=0)</function>
		<return_type>text</return_type>
		<description>Return the geometry as a GeoJSON element.</description>
	</command>
	<command name="ST_AsGML">
		<function>ST_AsGML(version, geom, maxdecimaldigits=15, options=0, nprefix=null, id=null)</function>
		<return_type>text</return_type>
		<description>Return the geometry as a GML version 2 or 3 element.</description>
	</command>
	<command name="ST_AsHEXEWKB">
		<function>ST_AsHEXEWKB(g1, NDRorXDR)</function>
		<return_type>text</return_type>
		<description>Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.</description>
	</command>
	<command name="ST_AsJPEG">
		<function>ST_AsJPEG(rast, options=NULL)</function>
		<return_type>bytea</return_type>
		<description>Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array).  If no band is specified and 1 or more than 3 bands, then only the first band is used.  If only 3 bands then all 3 bands are used and mapped to RGB.</description>
	</command>
	<command name="ST_AsKML">
		<function>ST_AsKML(geom, maxdecimaldigits=15)</function>
		<return_type>text</return_type>
		<description>Return the geometry as a KML element. Several variants. Default version=2, default precision=15</description>
	</command>
	<command name="ST_AsLatLonText">
		<function>ST_AsLatLonText(pt)</function>
		<return_type>text</return_type>
		<description>Return the Degrees, Minutes, Seconds representation of the given point.</description>
	</command>
	<command name="ST_Aspect">
		<function>ST_Aspect(rast, band=1, pixeltype=32BF, units=DEGREES, interpolate_nodata=FALSE)</function>
		<return_type>raster</return_type>
		<description>Returns the aspect (in degrees by default) of an elevation raster band.  Useful for analyzing terrain.</description>
	</command>
	<command name="ST_AsPNG">
		<function>ST_AsPNG(rast, options=NULL)</function>
		<return_type>bytea</return_type>
		<description>Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array).  If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used.  If more 2 or more than 4 bands and no bands specified, then only band 1 is used.  Bands are mapped to RGB or RGBA space.</description>
	</command>
	<command name="ST_AsRaster">
		<function>ST_AsRaster(geom, ref, pixeltype, value=1, nodataval=0, touched=false)</function>
		<return_type>raster</return_type>
		<description>Converts a PostGIS geometry to a PostGIS raster.</description>
	</command>
	<command name="ST_AsSVG">
		<function>ST_AsSVG(geom, rel=0, maxdecimaldigits=15)</function>
		<return_type>text</return_type>
		<description>Returns a Geometry in SVG path data given a geometry or geography object.</description>
	</command>
	<command name="ST_AsText">
		<function>ST_AsText(g1)</function>
		<return_type>text</return_type>
		<description>Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.</description>
	</command>
	<command name="ST_AsTIFF">
		<function>ST_AsTIFF(rast, options='', srid=sameassource)</function>
		<return_type>bytea</return_type>
		<description>Return the raster selected bands as a single TIFF image (byte array).  If no band is specified, then will try to use all bands.</description>
	</command>
	<command name="ST_AsX3D">
		<function>ST_AsX3D(g1, maxdecimaldigits=15, options=0)</function>
		<return_type>text</return_type>
		<description>Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML</description>
	</command>
	<command name="ST_Azimuth">
		<function>ST_Azimuth(pointA, pointB)</function>
		<return_type>float</return_type>
		<description>Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.</description>
	</command>
	<command name="ST_Band">
		<function>ST_Band(rast, nbands = ARRAY[1])</function>
		<return_type>raster</return_type>
		<description>Returns one or more bands of an existing raster as a new raster.  Useful for building new rasters from existing rasters.</description>
	</command>
	<command name="ST_BandIsNoData">
		<function>ST_BandIsNoData(rast, band, forceChecking=true)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the band is filled with only nodata values.</description>
	</command>
	<command name="ST_BandMetaData">
		<function>ST_BandMetaData(rast, bandnum=1)</function>
		<return_type>record</return_type>
		<description>Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.</description>
	</command>
	<command name="ST_BandNoDataValue">
		<function>ST_BandNoDataValue(rast, bandnum=1)</function>
		<return_type>double</return_type>
		<description>Returns the value in a given band that represents no data. If no band num 1 is assumed.</description>
	</command>
	<command name="ST_BandPath">
		<function>ST_BandPath(rast, bandnum=1)</function>
		<return_type>text</return_type>
		<description>Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.</description>
	</command>
	<command name="ST_BandPixelType">
		<function>ST_BandPixelType(rast, bandnum=1)</function>
		<return_type>text</return_type>
		<description>Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.</description>
	</command>
	<command name="ST_BdMPolyFromText">
		<function>ST_BdMPolyFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.</description>
	</command>
	<command name="ST_BdPolyFromText">
		<function>ST_BdPolyFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.</description>
	</command>
	<command name="ST_Boundary">
		<function>ST_Boundary(geomA)</function>
		<return_type>geometry</return_type>
		<description>Returns the closure of the combinatorial boundary of this Geometry.</description>
	</command>
	<command name="ST_Box2dFromGeoHash">
		<function>ST_Box2dFromGeoHash(geohash, precision=full_precision_of_geohash)</function>
		<return_type>box2d</return_type>
		<description>Return a BOX2D from a GeoHash string.</description>
	</command>
	<command name="ST_Buffer">
		<function>ST_Buffer(g1, radius_of_buffer)</function>
		<return_type>geometry</return_type>
		<description>(T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper.  Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#</description>
	</command>
	<command name="ST_BuildArea">
		<function>ST_BuildArea(A)</function>
		<return_type>geometry</return_type>
		<description>Creates an areal geometry formed by the constituent linework of given geometry</description>
	</command>
	<command name="ST_Centroid">
		<function>ST_Centroid(g1)</function>
		<return_type>geometry</return_type>
		<description>Returns the geometric center of a geometry.</description>
	</command>
	<command name="ST_ChangeEdgeGeom">
		<function>ST_ChangeEdgeGeom(atopology, anedge, acurve)</function>
		<return_type>integer</return_type>
		<description>Changes the shape of an edge without affecting the topology structure.</description>
	</command>
	<command name="ST_Clip">
		<function>ST_Clip(rast, nband, geom, nodataval=NULL, crop=TRUE)</function>
		<return_type>raster</return_type>
		<description>Returns the raster clipped by the input geometry.  If band number not is specified, all bands are processed. If crop is not specified or TRUE, the output raster is cropped.</description>
	</command>
	<command name="ST_ClosestPoint">
		<function>ST_ClosestPoint(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 2-dimensional point on g1 that is closest to g2.  This is the first point of  the shortest line.</description>
	</command>
	<command name="ST_Collect">
		<function>ST_Collect(g1field)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from a collection of other geometries.</description>
	</command>
	<command name="ST_CollectionExtract">
		<function>ST_CollectionExtract(collection, type)</function>
		<return_type>geometry</return_type>
		<description>Given a (multi)geometry, returns a (multi)geometry consisting only of elements of the specified type.</description>
	</command>
	<command name="ST_CollectionHomogenize">
		<function>ST_CollectionHomogenize(collection)</function>
		<return_type>geometry</return_type>
		<description>Given a geometry collection, returns the 'simplest' representation of the contents.</description>
	</command>
	<command name="ST_ColorMap">
		<function>ST_ColorMap(rast, nband=1, colormap=grayscale, method=INTERPOLATE)</function>
		<return_type>raster</return_type>
		<description>Creates a new raster of up to four 8BUI bands (grayscale, RGB, RGBA) from the source raster and a specified band. Band 1 is assumed if not specified.</description>
	</command>
	<command name="ST_ConcaveHull">
		<function>ST_ConcaveHull(geomA, target_percent, allow_holes=false)</function>
		<return_type>geometry</return_type>
		<description>The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set.  You can think of it as shrink wrapping.</description>
	</command>
	<command name="ST_Contains">
		<function>ST_Contains(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.</description>
	</command>
	<command name="ST_Contains">
		<function>ST_Contains(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.</description>
	</command>
	<command name="ST_ContainsProperly">
		<function>ST_ContainsProperly(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.</description>
	</command>
	<command name="ST_ContainsProperly">
		<function>ST_ContainsProperly(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.</description>
	</command>
	<command name="ST_ConvexHull">
		<function>ST_ConvexHull(geomA)</function>
		<return_type>geometry</return_type>
		<description>The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.</description>
	</command>
	<command name="ST_ConvexHull">
		<function>ST_ConvexHull(rast)</function>
		<return_type>geometry</return_type>
		<description>Return the convex hull geometry of the raster including pixel values equal to BandNoDataValue.  For regular shaped and non-skewed rasters, this gives the same result as ST_Envelope so only useful for irregularly shaped or skewed rasters.</description>
	</command>
	<command name="ST_CoordDim">
		<function>ST_CoordDim(geomA)</function>
		<return_type>integer</return_type>
		<description>Return the coordinate dimension of the ST_Geometry value.</description>
	</command>
	<command name="ST_Count">
		<function>ST_Count(rast, nband=1, exclude_nodata_value=true)</function>
		<return_type>bigint</return_type>
		<description>Returns the number of pixels in a given band of a raster or raster coverage.  If no band is specified defaults to band 1.  If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.</description>
	</command>
	<command name="ST_CoveredBy">
		<function>ST_CoveredBy(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B</description>
	</command>
	<command name="ST_CoveredBy">
		<function>ST_CoveredBy(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if no points of raster rastA lie outside raster rastB.</description>
	</command>
	<command name="ST_Covers">
		<function>ST_Covers(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns 1 (TRUE) if no point in Geometry B is outside Geometry A</description>
	</command>
	<command name="ST_Covers">
		<function>ST_Covers(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if no points of raster rastB lie outside raster rastA.</description>
	</command>
	<command name="ST_CreateTopoGeo">
		<function>ST_CreateTopoGeo(atopology, acollection)</function>
		<return_type>text</return_type>
		<description>Adds a collection of geometries to a given empty topology and returns a message detailing success.</description>
	</command>
	<command name="ST_Crosses">
		<function>ST_Crosses(g1, g2)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the supplied geometries have some, but not all, interior points in common.</description>
	</command>
	<command name="ST_CurveToLine">
		<function>ST_CurveToLine(curveGeom)</function>
		<return_type>geometry</return_type>
		<description>Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON</description>
	</command>
	<command name="ST_DelaunayTriangles">
		<function>ST_DelaunayTriangles(g1, tolerance, flags)</function>
		<return_type>geometry</return_type>
		<description>Return a Delaunay triangulation around the given input points.</description>
	</command>
	<command name="ST_DFullyWithin">
		<function>ST_DFullyWithin(g1, g2, distance)</function>
		<return_type>boolean</return_type>
		<description>Returns true if all of the geometries are within the specified distance of one another</description>
	</command>
	<command name="ST_DFullyWithin">
		<function>ST_DFullyWithin(rastA, nbandA, rastB, nbandB, distance_of_srid)</function>
		<return_type>boolean</return_type>
		<description>Return true if rasters rastA and rastB are fully within the specified distance of each other.</description>
	</command>
	<command name="ST_Difference">
		<function>ST_Difference(geomA, geomB)</function>
		<return_type>geometry</return_type>
		<description>Returns a geometry that represents that part of geometry A that does not intersect with geometry B.</description>
	</command>
	<command name="ST_Dimension">
		<function>ST_Dimension(g)</function>
		<return_type>integer</return_type>
		<description>The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.</description>
	</command>
	<command name="ST_Disjoint">
		<function>ST_Disjoint(A, B)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the Geometries do not 'spatially intersect' - if they do not share any space together.</description>
	</command>
	<command name="ST_Disjoint">
		<function>ST_Disjoint(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if raster rastA does not spatially intersect rastB.</description>
	</command>
	<command name="ST_Distance">
		<function>ST_Distance(g1, g2)</function>
		<return_type>float</return_type>
		<description>For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.  For geography type defaults to return spheroidal minimum distance between two geographies in meters.</description>
	</command>
	<command name="ST_Distance_Sphere">
		<function>ST_Distance_Sphere(geomlonlatA, geomlonlatB)</function>
		<return_type>float</return_type>
		<description>Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid ST_Distance_Spheroid, but less accurate. PostGIS versions prior to 1.5 only implemented for points.</description>
	</command>
	<command name="ST_Distance_Spheroid">
		<function>ST_Distance_Spheroid(geomlonlatA, geomlonlatB, measurement_spheroid)</function>
		<return_type>float</return_type>
		<description>Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS  versions prior to 1.5 only support points.</description>
	</command>
	<command name="ST_Distinct4ma">
		<function>ST_Distinct4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the number of unique pixel values in a neighborhood.</description>
	</command>
	<command name="ST_Dump">
		<function>ST_Dump(g1)</function>
		<return_type>geometry_dump</return_type>
		<description>Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.</description>
	</command>
	<command name="ST_DumpAsPolygons">
		<function>ST_DumpAsPolygons(rast, band_num=1, exclude_nodata_value=TRUE)</function>
		<return_type>setof text</return_type>
		<description>Returns a set of geomval (geom,val) rows, from a given raster band.  If no band number is specified, band num defaults to 1.</description>
	</command>
	<command name="ST_DumpPoints">
		<function>ST_DumpPoints(geom)</function>
		<return_type>geometry_dump</return_type>
		<description>Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.</description>
	</command>
	<command name="ST_DumpRings">
		<function>ST_DumpRings(a_polygon)</function>
		<return_type>geometry_dump</return_type>
		<description>Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.</description>
	</command>
	<command name="ST_DumpValues">
		<function>ST_DumpValues(rast, nband, exclude_nodata_value=true)</function>
		<return_type>setof record</return_type>
		<description>Get the values of the specified band as a 2-dimension array.</description>
	</command>
	<command name="ST_DWithin">
		<function>ST_DWithin(g1, g2, distance_of_srid)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.</description>
	</command>
	<command name="ST_DWithin">
		<function>ST_DWithin(rastA, nbandA, rastB, nbandB, distance_of_srid)</function>
		<return_type>boolean</return_type>
		<description>Return true if rasters rastA and rastB are within the specified distance of each other.</description>
	</command>
	<command name="ST_EndPoint">
		<function>ST_EndPoint(g)</function>
		<return_type>boolean</return_type>
		<description>Returns the last point of a LINESTRING geometry as a POINT.</description>
	</command>
	<command name="ST_Envelope">
		<function>ST_Envelope(g1)</function>
		<return_type>geometry</return_type>
		<description>Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.</description>
	</command>
	<command name="ST_Envelope">
		<function>ST_Envelope(rast)</function>
		<return_type>geometry</return_type>
		<description>Returns the polygon representation of the extent of the raster.</description>
	</command>
	<command name="ST_Equals">
		<function>ST_Equals(A, B)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the given geometries represent the same geometry. Directionality is ignored.</description>
	</command>
	<command name="ST_EstimatedExtent">
		<function>ST_EstimatedExtent(schema_name, table_name, geocolumn_name)</function>
		<return_type>box2d</return_type>
		<description>Return the 'estimated' extent of the given spatial table. The estimated is taken from the geometry column's statistics. The current schema will be used if not specified.</description>
	</command>
	<command name="ST_Expand">
		<function>ST_Expand(g1, units_to_expand)</function>
		<return_type>geometry</return_type>
		<description>Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision</description>
	</command>
	<command name="ST_Extent">
		<function>ST_Extent(geomfield)</function>
		<return_type>box2d</return_type>
		<description>an aggregate function that returns the bounding box that bounds rows of geometries.</description>
	</command>
	<command name="ST_ExteriorRing">
		<function>ST_ExteriorRing(a_polygon)</function>
		<return_type>geometry</return_type>
		<description>Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon.  Will not work with MULTIPOLYGON</description>
	</command>
	<command name="ST_Extrude">
		<function>ST_Extrude(geom, x, y, z)</function>
		<return_type>geometry</return_type>
		<description>Extrude a surface to a related volume</description>
	</command>
	<command name="ST_FlipCoordinates">
		<function>ST_FlipCoordinates(geom)</function>
		<return_type>geometry</return_type>
		<description>Returns a version of the given geometry with X and Y axis flipped. Useful for people  who have built latitude/longitude features and need to fix them.</description>
	</command>
	<command name="ST_Force2D">
		<function>ST_Force2D(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries into a '2-dimensional mode' so that all output representations will only have the X and Y coordinates.</description>
	</command>
	<command name="ST_Force3D">
		<function>ST_Force3D(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries into XYZ mode.  This is an alias for ST_Force3DZ.</description>
	</command>
	<command name="ST_Force3DM">
		<function>ST_Force3DM(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries into XYM mode.</description>
	</command>
	<command name="ST_Force3DZ">
		<function>ST_Force3DZ(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries into XYZ mode.  This is a synonym for ST_Force3D.</description>
	</command>
	<command name="ST_Force4D">
		<function>ST_Force4D(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries into XYZM mode.</description>
	</command>
	<command name="ST_ForceCollection">
		<function>ST_ForceCollection(geomA)</function>
		<return_type>geometry</return_type>
		<description>Converts the geometry into a GEOMETRYCOLLECTION.</description>
	</command>
	<command name="ST_ForceLHR">
		<function>ST_ForceLHR(geom)</function>
		<return_type>geometry</return_type>
		<description>Force LHR orientation</description>
	</command>
	<command name="ST_ForceRHR">
		<function>ST_ForceRHR(g)</function>
		<return_type>boolean</return_type>
		<description>Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.</description>
	</command>
	<command name="ST_ForceSFS">
		<function>ST_ForceSFS(geomA)</function>
		<return_type>geometry</return_type>
		<description>Forces the geometries to use SFS 1.1 geometry types only.</description>
	</command>
	<command name="ST_FromGDALRaster">
		<function>ST_FromGDALRaster(gdaldata, srid=NULL)</function>
		<return_type>raster</return_type>
		<description>Returns a raster from a supported GDAL raster file.</description>
	</command>
	<command name="ST_GDALDrivers">
		<function>ST_GDALDrivers(OUT idx, OUT short_name, OUT long_name, OUT create_options)</function>
		<return_type>setof record</return_type>
		<description>Returns a list of raster formats supported by your lib gdal.  These are the formats you can output your raster using ST_AsGDALRaster.</description>
	</command>
	<command name="ST_GeogFromText">
		<function>ST_GeogFromText(EWKT)</function>
		<return_type>geography</return_type>
		<description>Return a specified geography value from Well-Known Text representation or extended (WKT).</description>
	</command>
	<command name="ST_GeogFromWKB">
		<function>ST_GeogFromWKB(geom)</function>
		<return_type>geography</return_type>
		<description>Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).</description>
	</command>
	<command name="ST_GeographyFromText">
		<function>ST_GeographyFromText(EWKT)</function>
		<return_type>geography</return_type>
		<description>Return a specified geography value from Well-Known Text representation or extended (WKT).</description>
	</command>
	<command name="ST_GeoHash">
		<function>ST_GeoHash(geom, maxchars=full_precision_of_point)</function>
		<return_type>text</return_type>
		<description>Return a GeoHash representation of the geometry.</description>
	</command>
	<command name="ST_GeomCollFromText">
		<function>ST_GeomCollFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to 0.</description>
	</command>
	<command name="ST_GeometryFromText">
		<function>ST_GeometryFromText(WKT)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Well-Known Text representation (WKT).  This is an alias name for ST_GeomFromText</description>
	</command>
	<command name="ST_GeometryN">
		<function>ST_GeometryN(geomA, n)</function>
		<return_type>geometry</return_type>
		<description>Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.</description>
	</command>
	<command name="ST_GeometryType">
		<function>ST_GeometryType(g1)</function>
		<return_type>text</return_type>
		<description>Return the geometry type of the ST_Geometry value.</description>
	</command>
	<command name="ST_GeomFromEWKB">
		<function>ST_GeomFromEWKB(EWKB)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).</description>
	</command>
	<command name="ST_GeomFromEWKT">
		<function>ST_GeomFromEWKT(EWKT)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).</description>
	</command>
	<command name="ST_GeomFromGeoHash">
		<function>ST_GeomFromGeoHash(geohash, precision=full_precision_of_geohash)</function>
		<return_type>geometry</return_type>
		<description>Return a geometry from a GeoHash string.</description>
	</command>
	<command name="ST_GeomFromGeoJSON">
		<function>ST_GeomFromGeoJSON(geomjson)</function>
		<return_type>geometry</return_type>
		<description>Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object</description>
	</command>
	<command name="ST_GeomFromGML">
		<function>ST_GeomFromGML(geomgml)</function>
		<return_type>geometry</return_type>
		<description>Takes as input GML representation of geometry and outputs a PostGIS geometry object</description>
	</command>
	<command name="ST_GeomFromKML">
		<function>ST_GeomFromKML(geomkml)</function>
		<return_type>geometry</return_type>
		<description>Takes as input KML representation of geometry and outputs a PostGIS geometry object</description>
	</command>
	<command name="ST_GeomFromText">
		<function>ST_GeomFromText(WKT)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Well-Known Text representation (WKT).</description>
	</command>
	<command name="ST_GeomFromWKB">
		<function>ST_GeomFromWKB(geom)</function>
		<return_type>geometry</return_type>
		<description>Creates a geometry instance from a Well-Known Binary geometry representation (WKB) and optional SRID.</description>
	</command>
	<command name="ST_GeomFromWKB">
		<function>ST_GeomFromWKB(geom)</function>
		<return_type>geometry</return_type>
		<description>Makes a geometry from WKB with the given SRID</description>
	</command>
	<command name="ST_GeoReference">
		<function>ST_GeoReference(rast, format=GDAL)</function>
		<return_type>text</return_type>
		<description>Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.</description>
	</command>
	<command name="ST_GetFaceEdges">
		<function>ST_GetFaceEdges(atopology, aface)</function>
		<return_type>getfaceedges_returntype</return_type>
		<description>Returns a set of ordered edges that bound aface.</description>
	</command>
	<command name="ST_GetFaceGeometry">
		<function>ST_GetFaceGeometry(atopology, aface)</function>
		<return_type>geometry</return_type>
		<description>Returns the polygon in the given topology with the specified face id.</description>
	</command>
	<command name="ST_GMLToSQL">
		<function>ST_GMLToSQL(geomgml)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from GML representation.  This is an alias name for ST_GeomFromGML</description>
	</command>
	<command name="ST_HasArc">
		<function>ST_HasArc(geomA)</function>
		<return_type>boolean</return_type>
		<description>Returns true if a geometry or geometry collection contains a circular string</description>
	</command>
	<command name="ST_HasNoBand">
		<function>ST_HasNoBand(rast, bandnum=1)</function>
		<return_type>boolean</return_type>
		<description>Returns true if there is no band with given band number.  If no band number is specified, then band number 1 is assumed.</description>
	</command>
	<command name="ST_HausdorffDistance">
		<function>ST_HausdorffDistance(g1, g2)</function>
		<return_type>float</return_type>
		<description>Returns the Hausdorff distance between two geometries.  Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.</description>
	</command>
	<command name="ST_Height">
		<function>ST_Height(rast)</function>
		<return_type>integer</return_type>
		<description>Returns the height of the raster in pixels.</description>
	</command>
	<command name="ST_HillShade">
		<function>ST_HillShade(rast, band=1, pixeltype=32BF, azimuth=315, altitude=45, max_bright=255, scale=1.0, interpolate_nodata=FALSE)</function>
		<return_type>raster</return_type>
		<description>Returns the hypothetical illumination of an elevation raster band using provided azimuth, altitude, brightness and scale inputs.</description>
	</command>
	<command name="ST_Histogram">
		<function>ST_Histogram(rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false)</function>
		<return_type>setof record</return_type>
		<description>Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.</description>
	</command>
	<command name="ST_InitTopoGeo">
		<function>ST_InitTopoGeo(topology_schema_name)</function>
		<return_type>text</return_type>
		<description>Creates a new topology schema and registers this new schema in the topology.topology table and details summary of process.</description>
	</command>
	<command name="ST_InteriorRingN">
		<function>ST_InteriorRingN(a_polygon, n)</function>
		<return_type>geometry</return_type>
		<description>Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.</description>
	</command>
	<command name="ST_InterpolatePoint">
		<function>ST_InterpolatePoint(line, point)</function>
		<return_type>float</return_type>
		<description>Return the value of the measure dimension of a geometry at the point closed to the provided point.</description>
	</command>
	<command name="ST_Intersection">
		<function>ST_Intersection(geom, rast, band_num=1)</function>
		<return_type>setof text</return_type>
		<description>Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.</description>
	</command>
	<command name="ST_Intersection">
		<function>ST_Intersection(geomA, geomB)</function>
		<return_type>geometry</return_type>
		<description>(T) Returns a geometry that represents the shared portion of geomA and geomB.  The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.</description>
	</command>
	<command name="ST_Intersects">
		<function>ST_Intersects(geomA, geomB)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the Geometries/Geography 'spatially intersect in 2D' - (share any portion of space) and FALSE if they don't (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)</description>
	</command>
	<command name="ST_Intersects">
		<function>ST_Intersects(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if raster rastA spatially intersects raster rastB.</description>
	</command>
	<command name="ST_InvDistWeight4ma">
		<function>ST_InvDistWeight4ma(value, pos, VARIADIC userargs)</function>
		<return_type>double</return_type>
		<description>Raster processing function that interpolates a pixel's value from the pixel's neighborhood.</description>
	</command>
	<command name="ST_IsClosed">
		<function>ST_IsClosed(g)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the LINESTRING's start and end points are coincident. For Polyhedral surface is closed (volumetric).</description>
	</command>
	<command name="ST_IsCollection">
		<function>ST_IsCollection(g)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)</description>
	</command>
	<command name="ST_IsEmpty">
		<function>ST_IsEmpty(geomA)</function>
		<return_type>boolean</return_type>
		<description>Returns true if this Geometry is an empty geometrycollection, polygon, point etc.</description>
	</command>
	<command name="ST_IsEmpty">
		<function>ST_IsEmpty(rast)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.</description>
	</command>
	<command name="ST_IsRing">
		<function>ST_IsRing(g)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if this LINESTRING is both closed and simple.</description>
	</command>
	<command name="ST_IsSimple">
		<function>ST_IsSimple(geomA)</function>
		<return_type>boolean</return_type>
		<description>Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.</description>
	</command>
	<command name="ST_IsValid">
		<function>ST_IsValid(g)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the ST_Geometry is well formed.</description>
	</command>
	<command name="ST_IsValidDetail">
		<function>ST_IsValidDetail(geom)</function>
		<return_type>valid_detail</return_type>
		<description>Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.</description>
	</command>
	<command name="ST_IsValidReason">
		<function>ST_IsValidReason(geomA)</function>
		<return_type>text</return_type>
		<description>Returns text stating if a geometry is valid or not and if not valid, a reason why.</description>
	</command>
	<command name="ST_Length">
		<function>ST_Length(a_2dlinestring)</function>
		<return_type>float</return_type>
		<description>Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)</description>
	</command>
	<command name="ST_Length2D">
		<function>ST_Length2D(a_2dlinestring)</function>
		<return_type>float</return_type>
		<description>Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length</description>
	</command>
	<command name="ST_Length2D_Spheroid">
		<function>ST_Length2D_Spheroid(a_linestring, a_spheroid)</function>
		<return_type>float</return_type>
		<description>Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.</description>
	</command>
	<command name="ST_Length_Spheroid">
		<function>ST_Length_Spheroid(a_linestring, a_spheroid)</function>
		<return_type>float</return_type>
		<description>Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.</description>
	</command>
	<command name="ST_LineCrossingDirection">
		<function>ST_LineCrossingDirection(linestringA, linestringB)</function>
		<return_type>integer</return_type>
		<description>Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.</description>
	</command>
	<command name="ST_LineFromMultiPoint">
		<function>ST_LineFromMultiPoint(aMultiPoint)</function>
		<return_type>geometry</return_type>
		<description>Creates a LineString from a MultiPoint geometry.</description>
	</command>
	<command name="ST_LineFromText">
		<function>ST_LineFromText(WKT)</function>
		<return_type>geometry</return_type>
		<description>Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.</description>
	</command>
	<command name="ST_LineFromWKB">
		<function>ST_LineFromWKB(WKB)</function>
		<return_type>geometry</return_type>
		<description>Makes a LINESTRING from WKB with the given SRID</description>
	</command>
	<command name="ST_LineInterpolatePoint">
		<function>ST_LineInterpolatePoint(a_linestring, a_fraction)</function>
		<return_type>geometry</return_type>
		<description>Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.</description>
	</command>
	<command name="ST_LineLocatePoint">
		<function>ST_LineLocatePoint(a_linestring, a_point)</function>
		<return_type>float</return_type>
		<description>Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.</description>
	</command>
	<command name="ST_LineMerge">
		<function>ST_LineMerge(amultilinestring)</function>
		<return_type>geometry</return_type>
		<description>Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.</description>
	</command>
	<command name="ST_LinestringFromWKB">
		<function>ST_LinestringFromWKB(WKB)</function>
		<return_type>geometry</return_type>
		<description>Makes a geometry from WKB with the given SRID.</description>
	</command>
	<command name="ST_LineSubstring">
		<function>ST_LineSubstring(a_linestring, startfraction, endfraction)</function>
		<return_type>geometry</return_type>
		<description>Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.</description>
	</command>
	<command name="ST_LineToCurve">
		<function>ST_LineToCurve(geomANoncircular)</function>
		<return_type>geometry</return_type>
		<description>Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON</description>
	</command>
	<command name="ST_LocateAlong">
		<function>ST_LocateAlong(ageom_with_measure, a_measure, offset)</function>
		<return_type>geometry</return_type>
		<description>Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.</description>
	</command>
	<command name="ST_LocateBetween">
		<function>ST_LocateBetween(geomA, measure_start, measure_end, offset)</function>
		<return_type>geometry</return_type>
		<description>Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.</description>
	</command>
	<command name="ST_LocateBetweenElevations">
		<function>ST_LocateBetweenElevations(geom_mline, elevation_start, elevation_end)</function>
		<return_type>geometry</return_type>
		<description>Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.</description>
	</command>
	<command name="ST_LongestLine">
		<function>ST_LongestLine(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.</description>
	</command>
	<command name="ST_M">
		<function>ST_M(a_point)</function>
		<return_type>float</return_type>
		<description>Return the M coordinate of the point, or NULL if not available. Input must be a point.</description>
	</command>
	<command name="ST_MakeBox2D">
		<function>ST_MakeBox2D(pointLowLeft, pointUpRight)</function>
		<return_type>box2d</return_type>
		<description>Creates a BOX2D defined by the given point geometries.</description>
	</command>
	<command name="ST_MakeEmptyRaster">
		<function>ST_MakeEmptyRaster(rast)</function>
		<return_type>raster</return_type>
		<description>Returns an empty raster (having no bands) of given dimensions (width &amp; height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx &amp;skewy) and reference system (srid).   If a raster is passed in, returns a new raster with the same size, alignment and SRID.  If srid is left out, the spatial ref is set to unknown (0).</description>
	</command>
	<command name="ST_MakeEnvelope">
		<function>ST_MakeEnvelope(xmin, ymin, xmax, ymax, srid=unknown)</function>
		<return_type>geometry</return_type>
		<description>Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.</description>
	</command>
	<command name="ST_MakeLine">
		<function>ST_MakeLine(geoms)</function>
		<return_type>geometry</return_type>
		<description>Creates a Linestring from point or line geometries.</description>
	</command>
	<command name="ST_MakePoint">
		<function>ST_MakePoint(x, y)</function>
		<return_type>geometry</return_type>
		<description>Creates a 2D,3DZ or 4D point geometry.</description>
	</command>
	<command name="ST_MakePointM">
		<function>ST_MakePointM(x, y, m)</function>
		<return_type>geometry</return_type>
		<description>Creates a point geometry with an x y and m coordinate.</description>
	</command>
	<command name="ST_MakePolygon">
		<function>ST_MakePolygon(linestring)</function>
		<return_type>geometry</return_type>
		<description>Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.</description>
	</command>
	<command name="ST_MakeValid">
		<function>ST_MakeValid(input)</function>
		<return_type>geometry</return_type>
		<description>Attempts to make an invalid geometry valid without losing vertices.</description>
	</command>
	<command name="ST_MapAlgebra">
		<function>ST_MapAlgebra(rast, nband, pixeltype, expression, nodataval=NULL)</function>
		<return_type>raster</return_type>
		<description>Expression version - Returns a one-band raster given one or two input rasters, band indexes and one or more user-specified SQL expressions.</description>
	</command>
	<command name="ST_MapAlgebra">
		<function>ST_MapAlgebra(rastbandargset, callbackfunc, pixeltype=NULL, extenttype=INTERSECTION, customextent=NULL, distancex=0, distancey=0, VARIADIC userargs=NULL)</function>
		<return_type>raster</return_type>
		<description>Callback function version - Returns a one-band raster given one or more input rasters, band indexes and one user-specified callback function.</description>
	</command>
	<command name="ST_MapAlgebraExpr">
		<function>ST_MapAlgebraExpr(rast, band, pixeltype, expression, nodataval=NULL)</function>
		<return_type>raster</return_type>
		<description>1 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the input raster band and of pixeltype provided.  Band 1 is assumed if no band is specified.</description>
	</command>
	<command name="ST_MapAlgebraExpr">
		<function>ST_MapAlgebraExpr(rast1, rast2, expression, pixeltype=same_as_rast1_band, extenttype=INTERSECTION, nodata1expr=NULL, nodata2expr=NULL, nodatanodataval=NULL)</function>
		<return_type>raster</return_type>
		<description>2 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the two input raster bands and of pixeltype provided.  band 1 of each raster is assumed if no band numbers are specified. The resulting raster will be aligned (scale, skew and pixel corners) on the grid defined by the first raster and have its extent defined by the 'extenttype' parameter. Values for 'extenttype' can be: INTERSECTION, UNION, FIRST, SECOND.</description>
	</command>
	<command name="ST_MapAlgebraFct">
		<function>ST_MapAlgebraFct(rast, onerasteruserfunc)</function>
		<return_type>raster</return_type>
		<description>1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.</description>
	</command>
	<command name="ST_MapAlgebraFct">
		<function>ST_MapAlgebraFct(rast1, rast2, tworastuserfunc, pixeltype=same_as_rast1, extenttype=INTERSECTION, VARIADIC userargs)</function>
		<return_type>raster</return_type>
		<description>2 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the 2 input raster bands and of pixeltype prodived. Band 1 is assumed if no band is specified. Extent type defaults to INTERSECTION if not specified.</description>
	</command>
	<command name="ST_MapAlgebraFctNgb">
		<function>ST_MapAlgebraFctNgb(rast, band, pixeltype, ngbwidth, ngbheight, onerastngbuserfunc, nodatamode, VARIADIC args)</function>
		<return_type>raster</return_type>
		<description>1-band version: Map Algebra Nearest Neighbor using user-defined PostgreSQL function. Return a raster which values are the result of a PLPGSQL user function involving a neighborhood of values from the input raster band.</description>
	</command>
	<command name="ST_Max4ma">
		<function>ST_Max4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the maximum pixel value in a neighborhood.</description>
	</command>
	<command name="ST_MaxDistance">
		<function>ST_MaxDistance(g1, g2)</function>
		<return_type>float</return_type>
		<description>Returns the 2-dimensional largest distance between two geometries in projected units.</description>
	</command>
	<command name="ST_Mean4ma">
		<function>ST_Mean4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the mean pixel value in a neighborhood.</description>
	</command>
	<command name="ST_Mem_Size">
		<function>ST_Mem_Size(geomA)</function>
		<return_type>integer</return_type>
		<description>Returns the amount of space (in bytes) the geometry takes.</description>
	</command>
	<command name="ST_MemUnion">
		<function>ST_MemUnion(geomfield)</function>
		<return_type>geometry</return_type>
		<description>Same as ST_Union, only memory-friendly (uses less memory and more processor time).</description>
	</command>
	<command name="ST_MetaData">
		<function>ST_MetaData(rast)</function>
		<return_type>record</return_type>
		<description>Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.</description>
	</command>
	<command name="ST_Min4ma">
		<function>ST_Min4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the minimum pixel value in a neighborhood.</description>
	</command>
	<command name="ST_MinConvexHull">
		<function>ST_MinConvexHull(rast, nband=NULL)</function>
		<return_type>geometry</return_type>
		<description>Return the convex hull geometry of the raster excluding NODATA pixels.</description>
	</command>
	<command name="ST_MinDist4ma">
		<function>ST_MinDist4ma(value, pos, VARIADIC userargs)</function>
		<return_type>double</return_type>
		<description>Raster processing function that returns the minimum distance (in number of pixels) between the pixel of interest and a neighboring pixel with value.</description>
	</command>
	<command name="ST_MinimumBoundingCircle">
		<function>ST_MinimumBoundingCircle(geomA, num_segs_per_qt_circ=48)</function>
		<return_type>geometry</return_type>
		<description>Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.</description>
	</command>
	<command name="ST_MinkowskiSum">
		<function>ST_MinkowskiSum(geom1, geom2)</function>
		<return_type>geometry</return_type>
		<description>Performs Minkowski sum</description>
	</command>
	<command name="ST_MLineFromText">
		<function>ST_MLineFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_MultiLineString value from WKT representation.</description>
	</command>
	<command name="ST_ModEdgeHeal">
		<function>ST_ModEdgeHeal(atopology, anedge, anotheredge)</function>
		<return_type>int</return_type>
		<description>Heal two edges by deleting the node connecting them, modifying the first edge and deleting the second edge. Returns the id of the deleted node.</description>
	</command>
	<command name="ST_ModEdgeSplit">
		<function>ST_ModEdgeSplit(atopology, anedge, apoint)</function>
		<return_type>integer</return_type>
		<description>Split an edge by creating a new node along an existing edge, modifying the original edge and adding a new edge.</description>
	</command>
	<command name="ST_MoveIsoNode">
		<function>ST_MoveIsoNode(atopology, anedge, apoint)</function>
		<return_type>text</return_type>
		<description>Moves an isolated node in a topology from one point to another.  If new apoint geometry exists as a node an error is thrown. REturns description of move.</description>
	</command>
	<command name="ST_MPointFromText">
		<function>ST_MPointFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.</description>
	</command>
	<command name="ST_MPolyFromText">
		<function>ST_MPolyFromText(WKT, srid)</function>
		<return_type>geometry</return_type>
		<description>Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.</description>
	</command>
	<command name="ST_Multi">
		<function>ST_Multi(g1)</function>
		<return_type>geometry</return_type>
		<description>Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.</description>
	</command>
	<command name="ST_NDims">
		<function>ST_NDims(g1)</function>
		<return_type>integer</return_type>
		<description>Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.</description>
	</command>
	<command name="ST_NearestValue">
		<function>ST_NearestValue(rast, bandnum, pt, exclude_nodata_value=true)</function>
		<return_type>double</return_type>
		<description>Returns the nearest non-NODATA value of a given band's pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.</description>
	</command>
	<command name="ST_Neighborhood">
		<function>ST_Neighborhood(rast, bandnum, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true)</function>
		<return_type>double</return_type>
		<description>Returns a 2-D double precision array of the non-NODATA values around a given band's pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.</description>
	</command>
	<command name="ST_NewEdgeHeal">
		<function>ST_NewEdgeHeal(atopology, anedge, anotheredge)</function>
		<return_type>int</return_type>
		<description>Heal two edges by deleting the node connecting them, deleting both edges, and replacing them with an edge whose direction is the same as the first edge provided.</description>
	</command>
	<command name="ST_NewEdgesSplit">
		<function>ST_NewEdgesSplit(atopology, anedge, apoint)</function>
		<return_type>integer</return_type>
		<description>Split an edge by creating a new node along an existing edge, deleting the original edge and replacing it with two new edges.  Returns the id of the new node created that joins the new edges.</description>
	</command>
	<command name="ST_Node">
		<function>ST_Node(geom)</function>
		<return_type>geometry</return_type>
		<description>Node a set of linestrings.</description>
	</command>
	<command name="ST_NotSameAlignmentReason">
		<function>ST_NotSameAlignmentReason(rastA, rastB)</function>
		<return_type>text</return_type>
		<description>Returns text stating if rasters are aligned and if not aligned, a reason why.</description>
	</command>
	<command name="ST_NPoints">
		<function>ST_NPoints(g1)</function>
		<return_type>integer</return_type>
		<description>Return the number of points (vertexes) in a geometry.</description>
	</command>
	<command name="ST_NRings">
		<function>ST_NRings(geomA)</function>
		<return_type>integer</return_type>
		<description>If the geometry is a polygon or multi-polygon returns the number of rings.</description>
	</command>
	<command name="ST_NumBands">
		<function>ST_NumBands(rast)</function>
		<return_type>integer</return_type>
		<description>Returns the number of bands in the raster object.</description>
	</command>
	<command name="ST_NumGeometries">
		<function>ST_NumGeometries(geom)</function>
		<return_type>integer</return_type>
		<description>If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.</description>
	</command>
	<command name="ST_NumInteriorRing">
		<function>ST_NumInteriorRing(a_polygon)</function>
		<return_type>integer</return_type>
		<description>Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.</description>
	</command>
	<command name="ST_NumInteriorRings">
		<function>ST_NumInteriorRings(a_polygon)</function>
		<return_type>integer</return_type>
		<description>Return the number of interior rings of the a polygon in the geometry. This will work with POLYGON and return NULL for a MULTIPOLYGON type or any other type</description>
	</command>
	<command name="ST_NumPatches">
		<function>ST_NumPatches(g1)</function>
		<return_type>integer</return_type>
		<description>Return the number of faces on a Polyhedral Surface.  Will return null for non-polyhedral geometries.</description>
	</command>
	<command name="ST_NumPoints">
		<function>ST_NumPoints(g1)</function>
		<return_type>integer</return_type>
		<description>Return the number of points in an ST_LineString or ST_CircularString value.</description>
	</command>
	<command name="ST_OffsetCurve">
		<function>ST_OffsetCurve(line, signed_distance, style_parameters='')</function>
		<return_type>geometry</return_type>
		<description>Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line</description>
	</command>
	<command name="ST_OrderingEquals">
		<function>ST_OrderingEquals(A, B)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the given geometries represent the same geometry and points are in the same directional order.</description>
	</command>
	<command name="ST_Orientation">
		<function>ST_Orientation(geom)</function>
		<return_type>integer</return_type>
		<description>Determine surface orientation</description>
	</command>
	<command name="ST_Overlaps">
		<function>ST_Overlaps(A, B)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.</description>
	</command>
	<command name="ST_Overlaps">
		<function>ST_Overlaps(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if raster rastA and rastB intersect but one does not completely contain the other.</description>
	</command>
	<command name="ST_PatchN">
		<function>ST_PatchN(geomA, n)</function>
		<return_type>geometry</return_type>
		<description>Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.</description>
	</command>
	<command name="ST_Perimeter">
		<function>ST_Perimeter(g1)</function>
		<return_type>float</return_type>
		<description>Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon).  geometry measurement is in units of spatial reference and geography is in meters.</description>
	</command>
	<command name="ST_Perimeter2D">
		<function>ST_Perimeter2D(geomA)</function>
		<return_type>float</return_type>
		<description>Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.  This is currently an alias for ST_Perimeter.</description>
	</command>
	<command name="ST_PixelAsCentroid">
		<function>ST_PixelAsCentroid(rast, columnx, rowy)</function>
		<return_type>geometry</return_type>
		<description>Returns the centroid (point geometry) of the area represented by a pixel.</description>
	</command>
	<command name="ST_PixelAsCentroids">
		<function>ST_PixelAsCentroids(rast, band=1, exclude_nodata_value=TRUE)</function>
		<return_type>geometry</return_type>
		<description>Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.  The point geometry is the centroid of the area represented by a pixel.</description>
	</command>
	<command name="ST_PixelAsPoint">
		<function>ST_PixelAsPoint(rast, columnx, rowy)</function>
		<return_type>geometry</return_type>
		<description>Returns a point geometry of the pixel's upper-left corner.</description>
	</command>
	<command name="ST_PixelAsPoints">
		<function>ST_PixelAsPoints(rast, band=1, exclude_nodata_value=TRUE)</function>
		<return_type>geometry</return_type>
		<description>Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.  The coordinates of the point geometry are of the pixel's upper-left corner.</description>
	</command>
	<command name="ST_PixelAsPolygon">
		<function>ST_PixelAsPolygon(rast, columnx, rowy)</function>
		<return_type>geometry</return_type>
		<description>Returns the polygon geometry that bounds the pixel for a particular row and column.</description>
	</command>
	<command name="ST_PixelAsPolygons">
		<function>ST_PixelAsPolygons(rast, band=1, exclude_nodata_value=TRUE)</function>
		<return_type>setof record</return_type>
		<description>Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.</description>
	</command>
	<command name="ST_PixelHeight">
		<function>ST_PixelHeight(rast)</function>
		<return_type>double</return_type>
		<description>Returns the pixel height in geometric units of the spatial reference system.</description>
	</command>
	<command name="ST_PixelOfValue">
		<function>ST_PixelOfValue(rast, nband, search, exclude_nodata_value=true)</function>
		<return_type>setof record</return_type>
		<description>Get the columnx, rowy coordinates of the pixel whose value equals the search value.</description>
	</command>
	<command name="ST_PixelWidth">
		<function>ST_PixelWidth(rast)</function>
		<return_type>double</return_type>
		<description>Returns the pixel width in geometric units of the spatial reference system.</description>
	</command>
	<command name="ST_Point">
		<function>ST_Point(x_lon, y_lat)</function>
		<return_type>geometry</return_type>
		<description>Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.</description>
	</command>
	<command name="ST_Point_Inside_Circle">
		<function>ST_Point_Inside_Circle(a_point, center_x, center_y, radius)</function>
		<return_type>boolean</return_type>
		<description>Is the point geometry insert circle defined by center_x, center_y, radius</description>
	</command>
	<command name="ST_PointFromGeoHash">
		<function>ST_PointFromGeoHash(geohash, precision=full_precision_of_geohash)</function>
		<return_type>point</return_type>
		<description>Return a point from a GeoHash string.</description>
	</command>
	<command name="ST_PointFromText">
		<function>ST_PointFromText(WKT)</function>
		<return_type>geometry</return_type>
		<description>Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.</description>
	</command>
	<command name="ST_PointN">
		<function>ST_PointN(a_linestring, n)</function>
		<return_type>geometry</return_type>
		<description>Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.</description>
	</command>
	<command name="ST_PointOnSurface">
		<function>ST_PointOnSurface(g1)</function>
		<return_type>geometry</return_type>
		<description>Returns a POINT guaranteed to lie on the surface.</description>
	</command>
	<command name="ST_Polygon">
		<function>ST_Polygon(aLineString, srid)</function>
		<return_type>geometry</return_type>
		<description>Returns a polygon built from the specified linestring and SRID.</description>
	</command>
	<command name="ST_Polygon">
		<function>ST_Polygon(rast, band_num=1)</function>
		<return_type>geometry</return_type>
		<description>Returns a multipolygon geometry formed by the union of pixels that have a pixel value that is not no data value.  If no band number is specified, band num defaults to 1.</description>
	</command>
	<command name="ST_PolygonFromText">
		<function>ST_PolygonFromText(WKT)</function>
		<return_type>geometry</return_type>
		<description>Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.</description>
	</command>
	<command name="ST_Polygonize">
		<function>ST_Polygonize(geomfield)</function>
		<return_type>geometry</return_type>
		<description>Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.</description>
	</command>
	<command name="ST_Project">
		<function>ST_Project(g1, distance, azimuth)</function>
		<return_type>geography</return_type>
		<description>Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.</description>
	</command>
	<command name="ST_Quantile">
		<function>ST_Quantile(rast, nband=1, exclude_nodata_value=true, quantiles=NULL)</function>
		<return_type>setof record</return_type>
		<description>Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the raster's 25%, 50%, 75% percentile.</description>
	</command>
	<command name="ST_Range4ma">
		<function>ST_Range4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the range of pixel values in a neighborhood.</description>
	</command>
	<command name="ST_RasterToWorldCoord">
		<function>ST_RasterToWorldCoord(rast, xcolumn, yrow)</function>
		<return_type>record</return_type>
		<description>Returns the raster's upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.</description>
	</command>
	<command name="ST_RasterToWorldCoordX">
		<function>ST_RasterToWorldCoordX(rast, xcolumn)</function>
		<return_type>float8</return_type>
		<description>Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.</description>
	</command>
	<command name="ST_RasterToWorldCoordY">
		<function>ST_RasterToWorldCoordY(rast, yrow)</function>
		<return_type>float8</return_type>
		<description>Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.</description>
	</command>
	<command name="ST_Reclass">
		<function>ST_Reclass(rast, nband, reclassexpr, pixeltype, nodataval=NULL)</function>
		<return_type>raster</return_type>
		<description>Creates a new raster composed of band types reclassified from original.  The nband is the band to be changed.  If nband is not specified assumed to be 1.  All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.</description>
	</command>
	<command name="ST_Relate">
		<function>ST_Relate(geomA, geomB, intersectionMatrixPattern)</function>
		<return_type>boolean</return_type>
		<description>Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern.  If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.</description>
	</command>
	<command name="ST_RelateMatch">
		<function>ST_RelateMatch(intersectionMatrix, intersectionMatrixPattern)</function>
		<return_type>boolean</return_type>
		<description>Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2</description>
	</command>
	<command name="ST_RemEdgeModFace">
		<function>ST_RemEdgeModFace(atopology, anedge)</function>
		<return_type>integer</return_type>
		<description>Removes an edge and, if the removed edge separated two faces, delete one of the them and modify the other to take the space of both.</description>
	</command>
	<command name="ST_RemEdgeNewFace">
		<function>ST_RemEdgeNewFace(atopology, anedge)</function>
		<return_type>integer</return_type>
		<description>Removes an edge and, if the removed edge separated two faces, delete the original faces and replace them with a new face.</description>
	</command>
	<command name="ST_RemoveIsoNode">
		<function>ST_RemoveIsoNode(atopology, anode)</function>
		<return_type>text</return_type>
		<description>Removes an isolated node and returns description of action. If the node is not isolated (is start or end of an edge), then an exception is thrown.</description>
	</command>
	<command name="ST_RemovePoint">
		<function>ST_RemovePoint(linestring, offset)</function>
		<return_type>geometry</return_type>
		<description>Removes point from a linestring. Offset is 0-based.</description>
	</command>
	<command name="ST_RemoveRepeatedPoints">
		<function>ST_RemoveRepeatedPoints(geom)</function>
		<return_type>geometry</return_type>
		<description>Returns a version of the given geometry with duplicated points removed.</description>
	</command>
	<command name="ST_Resample">
		<function>ST_Resample(rast, width, height, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125)</function>
		<return_type>raster</return_type>
		<description>Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.</description>
	</command>
	<command name="ST_Rescale">
		<function>ST_Rescale(rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125)</function>
		<return_type>raster</return_type>
		<description>Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.</description>
	</command>
	<command name="ST_Resize">
		<function>ST_Resize(rast, width, height, algorithm=NearestNeighbor, maxerr=0.125)</function>
		<return_type>raster</return_type>
		<description>Resize a raster to a new width/height</description>
	</command>
	<command name="ST_Reskew">
		<function>ST_Reskew(rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125)</function>
		<return_type>raster</return_type>
		<description>Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.</description>
	</command>
	<command name="ST_Reverse">
		<function>ST_Reverse(g1)</function>
		<return_type>geometry</return_type>
		<description>Returns the geometry with vertex order reversed.</description>
	</command>
	<command name="ST_Rotate">
		<function>ST_Rotate(geomA, rotRadians)</function>
		<return_type>geometry</return_type>
		<description>Rotate a geometry rotRadians counter-clockwise about an origin.</description>
	</command>
	<command name="ST_RotateX">
		<function>ST_RotateX(geomA, rotRadians)</function>
		<return_type>geometry</return_type>
		<description>Rotate a geometry rotRadians about the X axis.</description>
	</command>
	<command name="ST_RotateY">
		<function>ST_RotateY(geomA, rotRadians)</function>
		<return_type>geometry</return_type>
		<description>Rotate a geometry rotRadians about the Y axis.</description>
	</command>
	<command name="ST_RotateZ">
		<function>ST_RotateZ(geomA, rotRadians)</function>
		<return_type>geometry</return_type>
		<description>Rotate a geometry rotRadians about the Z axis.</description>
	</command>
	<command name="ST_Rotation">
		<function>ST_Rotation(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the rotation of the raster in radian.</description>
	</command>
	<command name="ST_Roughness">
		<function>ST_Roughness(rast, nband, customextent, pixeltype='32BF', interpolate_nodata=FALSE )</function>
		<return_type>raster</return_type>
		<description>Returns a raster with the calculated 'roughness' of a DEM.</description>
	</command>
	<command name="ST_SameAlignment">
		<function>ST_SameAlignment(rastA, rastB)</function>
		<return_type>boolean</return_type>
		<description>Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they don't with notice detailing issue.</description>
	</command>
	<command name="ST_Scale">
		<function>ST_Scale(geomA, XFactor, YFactor, ZFactor)</function>
		<return_type>geometry</return_type>
		<description>Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).</description>
	</command>
	<command name="ST_ScaleX">
		<function>ST_ScaleX(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the X component of the pixel width in units of coordinate reference system.</description>
	</command>
	<command name="ST_ScaleY">
		<function>ST_ScaleY(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the Y component of the pixel height in units of coordinate reference system.</description>
	</command>
	<command name="ST_Segmentize">
		<function>ST_Segmentize(geom, max_segment_length)</function>
		<return_type>geometry</return_type>
		<description>Return a modified geometry/geography having no segment longer than the given distance.  Distance computation is performed in 2d only. For geometry, length units are in units of spatial reference.  For geography, units are in meters.</description>
	</command>
	<command name="ST_SetBandIsNoData">
		<function>ST_SetBandIsNoData(rast, band=1)</function>
		<return_type>raster</return_type>
		<description>Sets the isnodata flag of the band to TRUE.</description>
	</command>
	<command name="ST_SetBandNoDataValue">
		<function>ST_SetBandNoDataValue(rast, nodatavalue)</function>
		<return_type>raster</return_type>
		<description>Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified.  To mark a band as having no nodata value, set the nodata value = NULL.</description>
	</command>
	<command name="ST_SetGeoReference">
		<function>ST_SetGeoReference(rast, georefcoords, format=GDAL)</function>
		<return_type>raster</return_type>
		<description>Set Georeference 6 georeference parameters  in a single call. Numbers should be separated by white space.  Accepts inputs in GDAL or ESRI format.  Default is GDAL.</description>
	</command>
	<command name="ST_SetPoint">
		<function>ST_SetPoint(linestring, zerobasedposition, point)</function>
		<return_type>geometry</return_type>
		<description>Replace point N of linestring with given point. Index is 0-based.</description>
	</command>
	<command name="ST_SetRotation">
		<function>ST_SetRotation(rast, rotation)</function>
		<return_type>float8</return_type>
		<description>Set the rotation of the raster in radian.</description>
	</command>
	<command name="ST_SetScale">
		<function>ST_SetScale(rast, xy)</function>
		<return_type>raster</return_type>
		<description>Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.</description>
	</command>
	<command name="ST_SetSkew">
		<function>ST_SetSkew(rast, skewxy)</function>
		<return_type>raster</return_type>
		<description>Sets the georeference X and Y skew (or rotation parameter).  If only one is passed in, sets X and Y to the same value.</description>
	</command>
	<command name="ST_SetSRID">
		<function>ST_SetSRID(geom, srid)</function>
		<return_type>geometry</return_type>
		<description>Sets the SRID on a geometry to a particular integer value.</description>
	</command>
	<command name="ST_SetSRID">
		<function>ST_SetSRID(rast, srid)</function>
		<return_type>raster</return_type>
		<description>Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.</description>
	</command>
	<command name="ST_SetUpperLeft">
		<function>ST_SetUpperLeft(rast, x, y)</function>
		<return_type>raster</return_type>
		<description>Sets the value of the upper left corner of the pixel to projected X and Y coordinates.</description>
	</command>
	<command name="ST_SetValue">
		<function>ST_SetValue(rast, bandnum, geom, newvalue)</function>
		<return_type>raster</return_type>
		<description>Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.</description>
	</command>
	<command name="ST_SetValues">
		<function>ST_SetValues(rast, nband, columnx, rowy, newvalueset, noset=NULL, keepnodata=FALSE)</function>
		<return_type>raster</return_type>
		<description>Returns modified raster resulting from setting the values of a given band.</description>
	</command>
	<command name="ST_SharedPaths">
		<function>ST_SharedPaths(lineal1, lineal2)</function>
		<return_type>geometry</return_type>
		<description>Returns a collection containing paths shared by the two input linestrings/multilinestrings.</description>
	</command>
	<command name="ST_Shift_Longitude">
		<function>ST_Shift_Longitude(geomA)</function>
		<return_type>geometry</return_type>
		<description>Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is &lt; 0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map</description>
	</command>
	<command name="ST_ShortestLine">
		<function>ST_ShortestLine(g1, g2)</function>
		<return_type>geometry</return_type>
		<description>Returns the 2-dimensional shortest line between two geometries</description>
	</command>
	<command name="ST_Simplify">
		<function>ST_Simplify(geomA, tolerance)</function>
		<return_type>geometry</return_type>
		<description>Returns a 'simplified' geometry version of the given TopoGeometry using the Douglas-Peucker algorithm.</description>
	</command>
	<command name="ST_Simplify">
		<function>ST_Simplify(geomA, tolerance)</function>
		<return_type>geometry</return_type>
		<description>Returns a 'simplified' version of the given geometry using the Douglas-Peucker algorithm.</description>
	</command>
	<command name="ST_SimplifyPreserveTopology">
		<function>ST_SimplifyPreserveTopology(geomA, tolerance)</function>
		<return_type>geometry</return_type>
		<description>Returns a 'simplified' version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.</description>
	</command>
	<command name="ST_SkewX">
		<function>ST_SkewX(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the georeference X skew (or rotation parameter).</description>
	</command>
	<command name="ST_SkewY">
		<function>ST_SkewY(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the georeference Y skew (or rotation parameter).</description>
	</command>
	<command name="ST_Slope">
		<function>ST_Slope(rast, nband=1, pixeltype=32BF, units=DEGREES, scale=1.0, interpolate_nodata=FALSE)</function>
		<return_type>raster</return_type>
		<description>Returns the slope (in degrees by default) of an elevation raster band.  Useful for analyzing terrain.</description>
	</command>
	<command name="ST_Snap">
		<function>ST_Snap(input, reference, tolerance)</function>
		<return_type>geometry</return_type>
		<description>Snap segments and vertices of input geometry to vertices of a reference geometry.</description>
	</command>
	<command name="ST_SnapToGrid">
		<function>ST_SnapToGrid(geomA, originX, originY, sizeX, sizeY)</function>
		<return_type>geometry</return_type>
		<description>Snap all points of the input geometry to a regular grid.</description>
	</command>
	<command name="ST_SnapToGrid">
		<function>ST_SnapToGrid(rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0)</function>
		<return_type>raster</return_type>
		<description>Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.</description>
	</command>
	<command name="ST_Split">
		<function>ST_Split(input, blade)</function>
		<return_type>geometry</return_type>
		<description>Returns a collection of geometries resulting by splitting a geometry.</description>
	</command>
	<command name="ST_SRID">
		<function>ST_SRID(g1)</function>
		<return_type>integer</return_type>
		<description>Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.</description>
	</command>
	<command name="ST_SRID">
		<function>ST_SRID(rast)</function>
		<return_type>integer</return_type>
		<description>Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.</description>
	</command>
	<command name="ST_StartPoint">
		<function>ST_StartPoint(geomA)</function>
		<return_type>geometry</return_type>
		<description>Returns the first point of a LINESTRING geometry as a POINT.</description>
	</command>
	<command name="ST_StdDev4ma">
		<function>ST_StdDev4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the standard deviation of pixel values in a neighborhood.</description>
	</command>
	<command name="ST_StraightSkeleton">
		<function>ST_StraightSkeleton(geom)</function>
		<return_type>geometry</return_type>
		<description>Compute a straight skeleton from a geometry</description>
	</command>
	<command name="ST_Sum4ma">
		<function>ST_Sum4ma(matrix, nodatamode, VARIADIC args)</function>
		<return_type>float8</return_type>
		<description>Raster processing function that calculates the sum of all pixel values in a neighborhood.</description>
	</command>
	<command name="ST_Summary">
		<function>ST_Summary(g)</function>
		<return_type>text</return_type>
		<description>Returns a text summary of the contents of the geometry.</description>
	</command>
	<command name="ST_Summary">
		<function>ST_Summary(rast)</function>
		<return_type>text</return_type>
		<description>Returns a text summary of the contents of the raster.</description>
	</command>
	<command name="ST_SummaryStats">
		<function>ST_SummaryStats(rastertable, rastercolumn, exclude_nodata_value)</function>
		<return_type>record</return_type>
		<description>Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.</description>
	</command>
	<command name="ST_SymDifference">
		<function>ST_SymDifference(geomA, geomB)</function>
		<return_type>geometry</return_type>
		<description>Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).</description>
	</command>
	<command name="ST_Tesselate">
		<function>ST_Tesselate(geom)</function>
		<return_type>geometry</return_type>
		<description>Perform surface Tesselation</description>
	</command>
	<command name="ST_Tile">
		<function>ST_Tile(rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL)</function>
		<return_type>setof raster</return_type>
		<description>Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.</description>
	</command>
	<command name="ST_Touches">
		<function>ST_Touches(g1, g2)</function>
		<return_type>boolean</return_type>
		<description>Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.</description>
	</command>
	<command name="ST_Touches">
		<function>ST_Touches(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.</description>
	</command>
	<command name="ST_TPI">
		<function>ST_TPI(rast, nband, customextent, pixeltype='32BF', interpolate_nodata=FALSE )</function>
		<return_type>raster</return_type>
		<description>Returns a raster with the calculated Topographic Position Index.</description>
	</command>
	<command name="ST_Transform">
		<function>ST_Transform(g1, srid)</function>
		<return_type>geometry</return_type>
		<description>Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.</description>
	</command>
	<command name="ST_Transform">
		<function>ST_Transform(rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley)</function>
		<return_type>raster</return_type>
		<description>Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.</description>
	</command>
	<command name="ST_Translate">
		<function>ST_Translate(g1, deltax, deltay)</function>
		<return_type>geometry</return_type>
		<description>Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or  ST_Translate(geom, X, Y,Z).</description>
	</command>
	<command name="ST_TransScale">
		<function>ST_TransScale(geomA, deltaX, deltaY, XFactor, YFactor)</function>
		<return_type>geometry</return_type>
		<description>Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.</description>
	</command>
	<command name="ST_TRI">
		<function>ST_TRI(rast, nband, customextent, pixeltype='32BF', interpolate_nodata=FALSE )</function>
		<return_type>raster</return_type>
		<description>Returns a raster with the calculated Terrain Ruggedness Index.</description>
	</command>
	<command name="ST_UnaryUnion">
		<function>ST_UnaryUnion(geom)</function>
		<return_type>geometry</return_type>
		<description>Like ST_Union, but working at the geometry component level.</description>
	</command>
	<command name="ST_Union">
		<function>ST_Union(g1field)</function>
		<return_type>geometry</return_type>
		<description>Returns a geometry that represents the point set union of the Geometries.</description>
	</command>
	<command name="ST_Union">
		<function>ST_Union(rast)</function>
		<return_type>raster</return_type>
		<description>Returns the union of a set of raster tiles into a single raster composed of 1 or more bands.</description>
	</command>
	<command name="ST_UpperLeftX">
		<function>ST_UpperLeftX(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the upper left X coordinate of raster in projected spatial ref.</description>
	</command>
	<command name="ST_UpperLeftY">
		<function>ST_UpperLeftY(rast)</function>
		<return_type>float8</return_type>
		<description>Returns the upper left Y coordinate of raster in projected spatial ref.</description>
	</command>
	<command name="ST_Value">
		<function>ST_Value(rast, pt, exclude_nodata_value=true)</function>
		<return_type>double</return_type>
		<description>Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.</description>
	</command>
	<command name="ST_ValueCount">
		<function>ST_ValueCount(rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count)</function>
		<return_type>setof record</return_type>
		<description>Returns a set of records containing a pixel band value  and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values.  If no band is specified defaults to band 1.  By default nodata value pixels are not counted.  and all other values in the pixel are output and pixel band values are rounded to the nearest integer.</description>
	</command>
	<command name="ST_Width">
		<function>ST_Width(rast)</function>
		<return_type>integer</return_type>
		<description>Returns the width of the raster in pixels.</description>
	</command>
	<command name="ST_Within">
		<function>ST_Within(A, B)</function>
		<return_type>boolean</return_type>
		<description>Returns true if the geometry A is completely inside geometry B</description>
	</command>
	<command name="ST_Within">
		<function>ST_Within(rastA, nbandA, rastB, nbandB)</function>
		<return_type>boolean</return_type>
		<description>Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.</description>
	</command>
	<command name="ST_WKBToSQL">
		<function>ST_WKBToSQL(WKB)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Well-Known Binary representation (WKB).  This is an alias name for ST_GeomFromWKB that takes no srid</description>
	</command>
	<command name="ST_WKTToSQL">
		<function>ST_WKTToSQL(WKT)</function>
		<return_type>geometry</return_type>
		<description>Return a specified ST_Geometry value from Well-Known Text representation (WKT).  This is an alias name for ST_GeomFromText</description>
	</command>
	<command name="ST_WorldToRasterCoord">
		<function>ST_WorldToRasterCoord(rast, pt)</function>
		<return_type>record</return_type>
		<description>Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.</description>
	</command>
	<command name="ST_WorldToRasterCoordX">
		<function>ST_WorldToRasterCoordX(rast, pt)</function>
		<return_type>integer</return_type>
		<description>Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.</description>
	</command>
	<command name="ST_WorldToRasterCoordY">
		<function>ST_WorldToRasterCoordY(rast, pt)</function>
		<return_type>integer</return_type>
		<description>Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.</description>
	</command>
	<command name="ST_X">
		<function>ST_X(a_point)</function>
		<return_type>float</return_type>
		<description>Return the X coordinate of the point, or NULL if not available. Input must be a point.</description>
	</command>
	<command name="ST_XMax">
		<function>ST_XMax(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns X maxima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="ST_XMin">
		<function>ST_XMin(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns X minima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="ST_Y">
		<function>ST_Y(a_point)</function>
		<return_type>float</return_type>
		<description>Return the Y coordinate of the point, or NULL if not available. Input must be a point.</description>
	</command>
	<command name="ST_YMax">
		<function>ST_YMax(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns Y maxima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="ST_YMin">
		<function>ST_YMin(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns Y minima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="ST_Z">
		<function>ST_Z(a_point)</function>
		<return_type>float</return_type>
		<description>Return the Z coordinate of the point, or NULL if not available. Input must be a point.</description>
	</command>
	<command name="ST_ZMax">
		<function>ST_ZMax(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns Z minima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="ST_Zmflag">
		<function>ST_Zmflag(geomA)</function>
		<return_type>smallint</return_type>
		<description>Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.</description>
	</command>
	<command name="ST_ZMin">
		<function>ST_ZMin(aGeomorBox2DorBox3D)</function>
		<return_type>float</return_type>
		<description>Returns Z minima of a bounding box 2d or 3d or a geometry.</description>
	</command>
	<command name="TopoElementArray_Agg">
		<function>TopoElementArray_Agg(tefield)</function>
		<return_type>topoelementarray</return_type>
		<description>Returns a topoelementarray for a set of element_id, type arrays (topoelements)</description>
	</command>
	<command name="TopoGeo_AddLineString">
		<function>TopoGeo_AddLineString(toponame, aline, tolerance)</function>
		<return_type>setof integer</return_type>
		<description>Adds a linestring to an existing topology using a tolerance and possibly splitting existing edges/faces. Returns edge identifiers</description>
	</command>
	<command name="TopoGeo_AddPoint">
		<function>TopoGeo_AddPoint(toponame, apoint, tolerance)</function>
		<return_type>integer</return_type>
		<description>Adds a point to an existing topology using a tolerance and possibly splitting an existing edge.</description>
	</command>
	<command name="TopoGeo_AddPolygon">
		<function>TopoGeo_AddPolygon(atopology, apoly, atolerance)</function>
		<return_type>integer</return_type>
		<description>Adds a polygon to an existing topology using a tolerance and possibly splitting existing edges/faces.</description>
	</command>
	<command name="Topology_Load_Tiger">
		<function>Topology_Load_Tiger(topo_name, region_type, region_id)</function>
		<return_type>text</return_type>
		<description>Loads a defined region of tiger data into a PostGIS Topology and transforming the tiger data to spatial reference of the topology  and snapping to the precision tolerance of the topology.</description>
	</command>
	<command name="TopologySummary">
		<function>TopologySummary(topology_schema_name)</function>
		<return_type>text</return_type>
		<description>Takes a topology name and provides summary totals of types of objects in topology</description>
	</command>
	<command name="toTopoGeom">
		<function>toTopoGeom(geom, toponame, layer_id, tolerance)</function>
		<return_type>topogeometry</return_type>
		<description>Converts a simple Geometry into a topo geometry</description>
	</command>
	<command name="UnlockRows">
		<function>UnlockRows(auth_token)</function>
		<return_type>integer</return_type>
		<description>Remove all locks held by specified authorization id. Returns the number of locks released.</description>
	</command>
	<command name="UpdateGeometrySRID">
		<function>UpdateGeometrySRID(table_name, column_name, srid)</function>
		<return_type>text</return_type>
		<description>Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.</description>
	</command>
	<command name="UpdateRasterSRID">
		<function>UpdateRasterSRID(schema_name, table_name, column_name, new_srid)</function>
		<return_type>raster</return_type>
		<description>Change the SRID of all rasters in the user-specified column and table.</description>
	</command>
	<command name="ValidateTopology">
		<function>ValidateTopology(topology_schema_name)</function>
		<return_type>setof validatetopology_returntype</return_type>
		<description>Returns a set of validatetopology_returntype objects detailing issues with topology</description>
	</command>
</postgis>